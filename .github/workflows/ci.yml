name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.1'
        cache: true

    - name: Verify dependencies
      run: |
        go mod download
        go mod verify

    - name: Build
      run: go build -ldflags "-X github.com/willibrandon/mtlog-audit.Version=dev" -o bin/mtlog-audit ./cmd/mtlog-audit

    - name: Run unit tests
      run: make test

    - name: Upload coverage (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  integration-test:
    name: Integration Tests (Linux)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.1'
        cache: true

    - name: Start Docker infrastructure
      run: |
        docker-compose -f docker/docker-compose.yml up -d
        echo "Waiting for services to be ready..."
        chmod +x docker/wait-for-services.sh
        bash docker/wait-for-services.sh

    - name: Run integration tests
      run: |
        export $(grep -v '^#' docker/.env | grep -v '^$' | xargs)
        go test -v -race -tags=integration ./integration/...

    - name: Stop Docker infrastructure
      if: always()
      run: docker-compose -f docker/docker-compose.yml down -v

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.1'
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: make docker

    - name: Test Docker image
      run: |
        docker run --rm mtlog-audit:$(git describe --tags --always --dirty 2>/dev/null || echo "dev") --version
